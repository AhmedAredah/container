@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

# Find Qt dependencies
find_dependency(Qt6 COMPONENTS Core Sql)

# Include targets
include("${CMAKE_CURRENT_LIST_DIR}/${CMAKE_FIND_PACKAGE_NAME}Targets.cmake")

# Compute the prefix directory from CMAKE_INSTALL_PREFIX
get_filename_component(PACKAGE_PREFIX_DIR "@CMAKE_INSTALL_PREFIX@" ABSOLUTE)

if(WIN32)
    set(CONTAINER_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
    set(CONTAINER_LIB_DIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")
    set(CONTAINER_BIN_DIR "@PACKAGE_CMAKE_INSTALL_BINDIR@")
else()
    set(CONTAINER_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
    set(CONTAINER_LIB_DIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")
    set(CONTAINER_BIN_DIR "@PACKAGE_CMAKE_INSTALL_BINDIR@")
endif()

# Common interface for all users regardless of compiler
set(Container_INCLUDE_DIRS ${CONTAINER_INCLUDE_DIR})
set(Container_LIBRARIES Container::Container)

# The target-based approach is compiler-agnostic
if(NOT TARGET Container::Container AND TARGET Container::${FIND_PACKAGE_NAME})
    add_library(Container::Container ALIAS Container::${FIND_PACKAGE_NAME})
endif()

# Output configuration information for debugging
if(NOT ${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
    message(STATUS "Found ${CMAKE_FIND_PACKAGE_NAME}: ${PACKAGE_PREFIX_DIR} (version: @PROJECT_VERSION@)")
    message(STATUS "  Include directory: ${CONTAINER_INCLUDE_DIR}")
    message(STATUS "  Library directory: ${CONTAINER_LIB_DIR}")
endif()

check_required_components(${CMAKE_FIND_PACKAGE_NAME})