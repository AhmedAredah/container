@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

# Find Qt dependencies
find_dependency(Qt6 COMPONENTS Core Sql)

# Include targets
include("${CMAKE_CURRENT_LIST_DIR}/@CMAKE_FIND_PACKAGE_NAME@Targets.cmake")

# Set the include and library directories using the package variables
set(Container_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set(Container_LIBRARY_DIRS "@PACKAGE_CMAKE_INSTALL_LIBDIR@")
set(Container_BINARY_DIRS "@PACKAGE_CMAKE_INSTALL_BINDIR@")

# The target-based approach handles platform differences automatically
set(Container_LIBRARIES Container::Container)

# Ensure the alias exists for backwards compatibility
if(NOT TARGET Container::Container AND TARGET Container::@CMAKE_FIND_PACKAGE_NAME@)
    add_library(Container::Container ALIAS Container::@CMAKE_FIND_PACKAGE_NAME@)
endif()

# Handle multi-config generators (Visual Studio, Xcode, Ninja Multi-Config)
if(TARGET Container::Container)
    # Get the generator type
    get_property(IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
    
    if(IS_MULTI_CONFIG)
        # For multi-config generators, ensure debug postfix is set
        set_target_properties(Container::Container PROPERTIES
            DEBUG_POSTFIX "d"
            RELWITHDEBINFO_POSTFIX ""
            MINSIZEREL_POSTFIX ""
        )
        
        # On Windows with multi-config, we may need to handle import libraries
        if(WIN32 AND BUILD_SHARED_LIBS)
            # The target properties are already set during export/install
            # CMake will handle the config-specific paths automatically
            set_target_properties(Container::Container PROPERTIES
                MAP_IMPORTED_CONFIG_MINSIZEREL Release
                MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
            )
        endif()
    endif()
endif()

# Output configuration information for debugging
if(NOT @CMAKE_FIND_PACKAGE_NAME@_FIND_QUIETLY)
    message(STATUS "Found @CMAKE_FIND_PACKAGE_NAME@: @PACKAGE_PREFIX_DIR@ (version: @PROJECT_VERSION@)")
    message(STATUS "  Include directory: ${Container_INCLUDE_DIRS}")
    message(STATUS "  Library directory: ${Container_LIBRARY_DIRS}")
    message(STATUS "  Binary directory: ${Container_BINARY_DIRS}")
    if(TARGET Container::Container)
        get_property(IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
        if(IS_MULTI_CONFIG)
            message(STATUS "  Multi-config generator detected")
        endif()
    endif()
endif()

check_required_components(@CMAKE_FIND_PACKAGE_NAME@)